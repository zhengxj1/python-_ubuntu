1. 首先重建pyscenic环境
2. 安装pyscenic
3. 运行run_pyscenic.sh，主要是激活环境后


1. 提取矩阵（R）
write_expre=function(sce_test){
write.csv(t(as.matrix(sce_test@assays$RNA@counts)),file = "F:/BaiduSyncdisk/R code/SCENIC/SCENIC_exp.csv")}
write_expre(NK)

下载文件
# 准备数据库 （人）
mkdir -p cisTarget
cd cisTarget
# ranking database
wget https://resources.aertslab.org/cistarget/databases/homo_sapiens/hg38/refseq_r80/mc9nr/gene_based/hg38__refseq-r80__500bp_up_and_100bp_down_tss.mc9nr.feather
wget https://resources.aertslab.org/cistarget/databases/homo_sapiens/hg38/refseq_r80/mc9nr/gene_based/hg38__refseq-r80__10kb_up_and_down_tss.mc9nr.feather
# motif database
wget https://resources.aertslab.org/cistarget/motif2tf/motifs-v9-nr.hgnc-m0.001-o0.0.tbl
# TF list
wget https://github.com/aertslab/pySCENIC/blob/master/resources/hs_hgnc_tfs.txt

2. loom转换(Python) 可以在自己conda目录下输入 python change.py运行脚本，脚本内容：
import os, sys
os.getcwd()
os.listdir(os.getcwd())
import loompy as lp
import numpy as np
import scanpy as sc
x=sc.read_csv("F:\BaiduSyncdisk\R code\SCENIC\SCENIC_exp.csv")
row_attrs = {"Gene": np.array(x.var_names),}
col_attrs = {"CellID": np.array(x.obs_names)}
lp.create("F:\BaiduSyncdisk\R code\SCENIC\SCENIC.loom",x.X.transpose(),row_attrs,col_attrs)

3. 将loom文件传入linux 可以运行脚本 nohup bash run_pyscenic.sh &

.sh脚本内容
conda activate pyscenic
dir=/home/jw/zxjbisoft/SCENIC/
tfs=$dir/allTFs_hg38.txt
feather=$dir/hg38__refseq-r80__10kb_up_and_down_tss.mc9nr.genes_vs_motifs.rankings.feather
tbl=$dir/motifs-v10nr_clust-nr.hgnc-m0.001-o0.0.tbl 
input_loom=$dir/SCENIC.loom
ls $tfs  $feather  $tbl  

pyscenic grn \
--num_workers 20 \
--output adj.sample.tsv \
--method grnboost2 \
$input_loom  $tfs 


pyscenic ctx \
adj.sample.tsv $feather \
--annotations_fname $tbl \
--expression_mtx_fname $input_loom  \
--mode "dask_multiprocessing" \
--output reg.csv \
--num_workers 20  \
--mask_dropouts

pyscenic aucell \
$input_loom \
reg.csv \
--output out_SCENIC.loom \
--num_workers 20 

4. 结果：下面结果，传到R再可视化
10M  3 12 09:15 out_SCENIC.loom
6.7M  3 12 09:15 pbmc_3k.loom
13M  3 12 09:15 reg.csv

################docker########
# pySCENIC CLI version (recommended).
docker pull aertslab/pyscenic:0.12.1
podman pull docker://aertslab/pyscenic:0.12.1

# pySCENIC CLI version + ipython kernel + scanpy.
docker pull aertslab/pyscenic_scanpy:0.12.1_1.9.1
podman pull docker://aertslab/pyscenic_scanpy:0.12.1_1.9.1

docker run -it --rm -v /home/jw/zxjbisoft/SCENIC:/scenicdata  aertslab/pyscenic:0.12.1 \
pyscenic grn \
--num_workers 60 \
--output /scenicdata/adj.sample.tsv \
--method grnboost2 \
/scenicdata/SCENIC.loom \
/scenicdata/allTFs_hg38.txt

docker run -it --rm -v /home/jw/zxjbisoft/SCENIC:/scenicdata  aertslab/pyscenic:0.12.1 \
pyscenic   ctx \
/scenicdata/adj.sample.tsv \
/scenicdata/hg38__refseq-r80__500bp_up_and_100bp_down_tss.mc9nr.genes_vs_motifs.rankings.feather \
--annotations_fname /scenicdata/motifs-v10nr_clust-nr.hgnc-m0.001-o0.0.tbl \
--expression_mtx_fname /scenicdata/SCENIC.loom \
--mode "dask_multiprocessing" \
--output /scenicdata/reg.csv \
--num_workers 60 \
--mask_dropouts

docker run -it --rm -v /home/jw/zxjbisoft/SCENIC:/scenicdata  aertslab/pyscenic:0.12.1 \
pyscenic  aucell \
/scenicdata/SCENIC.loom \
/scenicdata/reg.csv \
--output /scenicdata/out_SCENIC.loom \
--num_workers 20





